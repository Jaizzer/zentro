generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("CURRENT_DATABASE_URL")
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime

    @@map("sessions")
}

model User {
    id                     String                 @id @unique @default(cuid())
    username               String?                @unique
    profilePictureFilename String?                @map("profile_picture_filename")
    favoriteFiles          FavoriteFile[]
    FavoriteFolder         FavoriteFolder[]
    files                  File[]
    folders                Folder[]
    linkedAccount          LinkedAccount?
    localAccount           LocalAccount?
    incomingSharedFiles    UserFilePermission[]
    UserFolderPermission   UserFolderPermission[]

    @@map("users")
}

model LocalAccount {
    id                                    String    @id @default(cuid())
    passwordHash                          String    @unique @map("password_hash")
    email                                 String    @unique
    emailVerificationString               String    @unique @map("email_verification_string")
    emailVerificationStringExpirationDate DateTime? @map("email_verification_string_expiration_date")
    isVerified                            Boolean   @map("is_verified")
    userId                                String    @unique @map("user_id")
    user                                  User      @relation(fields: [userId], references: [id])

    @@map("local_accounts")
}

model LinkedAccount {
    id             String  @id @default(cuid())
    provider       String
    providerUserId String  @map("provider_user_id")
    email          String?
    userId         String  @unique @map("user_id")
    user           User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerUserId], name: "providerIdentity")
    @@map("linked_accounts")
}

model File {
    id              String               @id @default(cuid())
    name            String
    size            Float?
    type            String?
    createdAt       DateTime             @default(now()) @map("created_at")
    ownerId         String               @map("owner_id")
    folderId        String?              @map("folder_id")
    isPrivate       Boolean              @default(true)
    hash            String
    sequenceNumber  Int                  @default(autoincrement()) @map("sequence_number")
    favoritedBy     FavoriteFile[]
    folder          Folder?              @relation(fields: [folderId], references: [id])
    owner           User                 @relation(fields: [ownerId], references: [id])
    usersWithAccess UserFilePermission[]

    @@map("files")
}

model UserFilePermission {
    id     String @id @default(cuid())
    userId String @map("user_id")
    fileId String @map("file_id")
    file   File   @relation(fields: [fileId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@map("user_file_permissions")
}

model FavoriteFile {
    id     String @id @default(cuid())
    userId String @map("user_id")
    fileId String @map("file_id")
    file   File   @relation(fields: [fileId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@map("favorite_files")
}

model Folder {
    id              String                 @id @default(cuid())
    name            String
    ownerId         String                 @map("owner_id")
    createdAt       DateTime               @default(now()) @map("created_at")
    isPrivate       Boolean                @default(true) @map("is_private")
    updatedAt       DateTime               @default(now()) @map("updated_at")
    sequenceNumber  Int                    @default(autoincrement()) @map("sequence_number")
    isRoot          Boolean                @default(false) @map("is_root")
    favoritedBy     FavoriteFolder[]
    files           File[]
    parentFolderId  String?                @map("parent_folder_id")
    parentFolder    Folder?                @relation("folderHierarchy", fields: [parentFolderId], references: [id])
    childrenFolders Folder[]               @relation("folderHierarchy")
    owner           User                   @relation(fields: [ownerId], references: [id])
    usersWithAccess UserFolderPermission[]

    @@map("folders")
}

model UserFolderPermission {
    id       String @id @default(cuid())
    userId   String @map("user_id")
    folderId String @map("folder_id")
    folder   Folder @relation(fields: [folderId], references: [id])
    user     User   @relation(fields: [userId], references: [id])

    @@map("user_folder_permissions")
}

model FavoriteFolder {
    id       String @id @default(cuid())
    userId   String @map("user_id")
    folderId String @map("folder_id")
    folder   Folder @relation(fields: [folderId], references: [id])
    user     User   @relation(fields: [userId], references: [id])

    @@map("favorite_folders")
}
