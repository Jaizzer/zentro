generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("CURRENT_DATABASE_URL")
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime

    @@map("sessions")
}

model User {
    id                     String         @id @unique @default(cuid())
    username               String?        @unique
    localAccount           LocalAccount?
    linkedAccount          LinkedAccount?
    profilePictureFilename String?        @map("profile_picture_filename")
    File                   File?

    @@map("users")
}

model LocalAccount {
    id                                    String    @id @default(cuid())
    passwordHash                          String    @unique @map("password_hash")
    email                                 String    @unique
    emailVerificationString               String    @unique @map("email_verification_string")
    emailVerificationStringExpirationDate DateTime? @map("email_verification_string_expiration_date")
    isVerified                            Boolean   @map("is_verified")
    userId                                String    @unique @map("user_id")
    user                                  User      @relation(fields: [userId], references: [id])

    @@map("local_accounts")
}

model LinkedAccount {
    id             String  @id @default(cuid())
    provider       String
    providerUserId String  @map("provider_user_id")
    email          String?
    userId         String  @unique @map("user_id")
    user           User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerUserId], name: "providerIdentity")
    @@map("linked_accounts")
}

model File {
    id             String   @id @default(cuid())
    name           String
    size           Float?
    type           String?
    createdAt      DateTime @default(now()) @map("created_at")
    ownerId        String   @unique @map("owner_id")
    owner          User     @relation(fields: [ownerId], references: [id])
    folderId       String?  @map("folder_id")
    folder         File?    @relation("FileHierarchy", fields: [folderId], references: [id])
    folderContents File[]   @relation("FileHierarchy")

    @@map("files")
}
